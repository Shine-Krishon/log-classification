"""
Generate a comprehensive enhanced training dataset for log classification.
Creates 2500+ samples with proper category distribution.
"""
import pandas as pd
import random
from datetime import datetime, timedelta

# Configuration
OUTPUT_FILE = "data/training/dataset/enhanced_synthetic_logs.csv"
TARGET_SIZE = 2500

# Category-specific templates and variations
USER_ACTION_TEMPLATES = [
    "User {user} logged into the system",
    "User {user} logged out of the application", 
    "User {user} created new account for {entity}",
    "File {file} uploaded by user {user}",
    "Password changed for user {user}",
    "User profile updated by {user}",
    "Document {doc} signed by user {user}",
    "Report {report} generated by user {user}",
    "Settings modified by user {user}",
    "Account ID {id} created by {user}",
    "User initiated password reset for {email}",
    "Export requested by user {user}",
    "Configuration changed by {user}",
    "Backup initiated by user {user}",
    "Data import started by user {user}",
    "User {user} accessed dashboard",
    "Permission granted to user {user}",
    "User {user} downloaded {file}",
    "Profile picture updated by {user}",
    "User {user} submitted form {form}",
    "User {user} deleted {item}",
    "User {user} shared {resource}",
    "User {user} bookmarked {page}",
    "User {user} sent message to {recipient}",
    "User {user} updated {record}",
]

SYSTEM_NOTIFICATION_TEMPLATES = [
    "System startup completed successfully",
    "Daily backup completed at {timestamp}",
    "System maintenance window scheduled for {time}",
    "Server health check passed - all systems operational",
    "Database synchronization completed successfully",
    "Cache cleared and refreshed",
    "System updated to version {version}",
    "SSL certificate renewed successfully",
    "Security scan completed - no threats detected",
    "Disk cleanup completed - {size}GB freed",
    "Memory usage: {percent}% - within normal limits",
    "Network connectivity test passed",
    "Email service status: operational",
    "Load balancer configuration updated",
    "Scheduled task execution completed",
    "Database backup completed successfully",
    "Service restart completed",
    "Performance monitoring baseline updated",
    "System resource optimization completed",
    "Log rotation completed successfully",
]

WORKFLOW_ERROR_TEMPLATES = [
    "Payment processing failed: {reason} for order #{order}",
    "Order validation failed: missing required field '{field}'",
    "Stock update failed: product {sku} not found",
    "Email delivery failed: {reason}",
    "Authentication failed: {reason}",
    "Database connection timeout during transaction",
    "API rate limit exceeded for client {client}",
    "File upload failed: {reason}",
    "Report generation failed: {reason}",
    "Invoice generation failed: {reason}",
    "Shipping calculation error: {reason}",
    "Push notification failed: {reason}",
    "Third-party API call failed: {reason}",
    "Data validation error: {reason}",
    "Batch processing failed: {reason}",
    "Connection refused to {service}",
    "Timeout occurred during {operation}",
    "Processing error in {module}",
    "Validation failed for {entity}",
    "Service unavailable: {service}",
]

DEPRECATION_WARNING_TEMPLATES = [
    "Method '{method}' is deprecated. Use '{new_method}' instead",
    "Function '{function}' will be removed in v{version}. Migrate to '{new_function}'",
    "Endpoint '{endpoint}' is deprecated. Use '{new_endpoint}' for new integrations",
    "Configuration option '{option}' is deprecated and will be removed",
    "Legacy {feature} method will be discontinued in {timeframe}",
    "Database schema version {version} support ending {date}",
    "Old {format} format support will be removed in next major release",
    "Parameter '{param}' is deprecated in favor of '{new_param}'",
    "Warning: Using deprecated {protocol} protocol. Upgrade recommended",
    "Feature '{feature}' is deprecated. Use '{new_feature}' instead",
    "Library version {version} is deprecated. Please upgrade to {new_version}",
    "Old {engine} engine will be replaced in {timeframe}",
    "Deprecated: Using legacy {encoding} encoding. Switch to {new_encoding}",
    "Classic {interface} interface will be removed in favor of modern interface",
    "Warning: Legacy {format} format support ending soon",
]

# Data generation helpers
def generate_user():
    first_names = ["john", "jane", "mike", "sarah", "david", "emily", "robert", "lisa", "james", "maria", "chris", "anna", "alex", "kate", "tom"]
    last_names = ["smith", "johnson", "williams", "brown", "jones", "garcia", "miller", "davis", "rodriguez", "martinez", "anderson", "taylor", "thomas", "hernandez", "moore"]
    return f"{random.choice(first_names)}.{random.choice(last_names)}@company.com"

def generate_id():
    return random.randint(1000, 99999)

def generate_file():
    files = ["report.xlsx", "data.csv", "document.pdf", "image.jpg", "config.json", "backup.zip", "log.txt", "invoice.pdf", "presentation.pptx", "spreadsheet.xlsx"]
    return random.choice(files)

def generate_version():
    return f"{random.randint(1,5)}.{random.randint(0,9)}.{random.randint(0,9)}"

def generate_sources():
    return [
        "UserPortal", "SystemMonitor", "PaymentService", "LegacyAPI", "CRMSystem", 
        "HRSystem", "FinanceSystem", "ProjectManagement", "InventoryManagement",
        "SecurityService", "E-CommerceAPI", "AnalyticsAPI", "DevOpsService",
        "AuthService", "EmailService", "NotificationService", "OrderSystem",
        "BillingService", "ReportService", "DatabaseService", "APIGateway",
        "FileService", "ShippingService", "IntegrationService", "ValidationService",
        "ProcessingService", "MonitoringService", "BackupService", "ConfigService"
    ]

def generate_complexity_for_category(category):
    """Assign complexity based on category patterns"""
    if category == "user_action":
        return "regex"  # Simple patterns
    elif category == "system_notification":
        return random.choice(["regex", "bert"])  # Mix of simple and medium
    elif category == "workflow_error":
        return "bert"  # Medium complexity
    elif category == "deprecation_warning":
        return "bert"  # Medium complexity
    else:
        return "llm"  # Complex cases

def generate_dataset():
    """Generate comprehensive training dataset"""
    data = []
    sources = generate_sources()
    base_date = datetime(2025, 1, 1)
    
    # Target distribution (total ~2500)
    targets = {
        "user_action": 600,        # 24%
        "system_notification": 700, # 28%
        "workflow_error": 600,     # 24%
        "deprecation_warning": 400, # 16%
        "unclassified": 200        # 8% - edge cases
    }
    
    entry_id = 0
    
    # Generate user_action samples
    for i in range(targets["user_action"]):
        template = random.choice(USER_ACTION_TEMPLATES)
        message = template.format(
            user=generate_user(),
            entity=f"Client{random.randint(100,999)}",
            file=generate_file(),
            doc=f"contract_{random.randint(100,999)}.pdf",
            report=f"report_{random.randint(100,999)}",
            id=generate_id(),
            email=generate_user(),
            form=f"form_{random.randint(1,50)}",
            item=f"record_{random.randint(100,999)}",
            resource=f"document_{random.randint(100,999)}",
            page=f"page_{random.randint(1,100)}",
            recipient=generate_user(),
            record=f"entry_{random.randint(100,999)}"
        )
        
        timestamp = base_date + timedelta(days=random.randint(0, 365), hours=random.randint(0, 23), minutes=random.randint(0, 59))
        
        data.append({
            "timestamp": timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            "source": random.choice(sources),
            "log_message": message,
            "target_label": "user_action",
            "complexity": generate_complexity_for_category("user_action")
        })
        entry_id += 1
    
    # Generate system_notification samples
    for i in range(targets["system_notification"]):
        template = random.choice(SYSTEM_NOTIFICATION_TEMPLATES)
        message = template.format(
            timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            time="tonight",
            version=generate_version(),
            size=random.randint(1, 10),
            percent=random.randint(50, 90)
        )
        
        timestamp = base_date + timedelta(days=random.randint(0, 365), hours=random.randint(0, 23), minutes=random.randint(0, 59))
        
        data.append({
            "timestamp": timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            "source": random.choice(sources),
            "log_message": message,
            "target_label": "system_notification",
            "complexity": generate_complexity_for_category("system_notification")
        })
        entry_id += 1
    
    # Generate workflow_error samples
    error_reasons = [
        "insufficient funds", "invalid credentials", "missing required data", 
        "connection timeout", "invalid format", "permission denied",
        "resource not found", "service unavailable", "rate limit exceeded",
        "validation error", "processing timeout", "insufficient permissions"
    ]
    
    for i in range(targets["workflow_error"]):
        template = random.choice(WORKFLOW_ERROR_TEMPLATES)
        message = template.format(
            reason=random.choice(error_reasons),
            order=generate_id(),
            field=random.choice(["customer_email", "billing_address", "product_id", "quantity"]),
            sku=f"SKU-{random.randint(100,999)}",
            client=f"app_v{generate_version()}",
            service=random.choice(["PaymentService", "EmailService", "DatabaseService"]),
            operation=random.choice(["payment processing", "data validation", "file upload"]),
            module=random.choice(["ValidationModule", "ProcessingModule", "AuthModule"]),
            entity=random.choice(["order", "customer", "product", "invoice"])
        )
        
        timestamp = base_date + timedelta(days=random.randint(0, 365), hours=random.randint(0, 23), minutes=random.randint(0, 59))
        
        data.append({
            "timestamp": timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            "source": random.choice(sources),
            "log_message": message,
            "target_label": "workflow_error",
            "complexity": generate_complexity_for_category("workflow_error")
        })
        entry_id += 1
    
    # Generate deprecation_warning samples
    for i in range(targets["deprecation_warning"]):
        template = random.choice(DEPRECATION_WARNING_TEMPLATES)
        message = template.format(
            method=f"get{random.choice(['User', 'Customer', 'Order', 'Product'])}Info",
            new_method=f"fetch{random.choice(['User', 'Customer', 'Order', 'Product'])}Profile",
            function=f"calculate{random.choice(['Tax', 'Discount', 'Shipping'])}",
            new_function=f"compute{random.choice(['Tax', 'Discount', 'Shipping'])}Amount",
            version=generate_version(),
            endpoint=f"/api/v{random.randint(1,3)}/{random.choice(['users', 'orders', 'products'])}",
            new_endpoint=f"/api/v{random.randint(2,4)}/{random.choice(['users', 'orders', 'products'])}",
            option=f"{random.choice(['old_format', 'legacy_mode', 'compat_flag'])}",
            feature=random.choice(['authentication', 'reporting', 'validation']),
            timeframe=f"{random.randint(3,12)} months",
            date=f"December {random.randint(2025, 2027)}",
            format=random.choice(['XML', 'CSV', 'JSON']),
            param=f"legacy_{random.choice(['param', 'option', 'flag'])}",
            new_param=f"new_{random.choice(['param', 'option', 'flag'])}",
            protocol=random.choice(['SSL', 'TLS 1.0', 'HTTP']),
            new_feature=f"advanced_{random.choice(['export', 'import', 'validation'])}",
            new_version=generate_version(),
            engine=random.choice(['reporting', 'processing', 'validation']),
            encoding=random.choice(['MD5', 'SHA1', 'base64']),
            new_encoding=random.choice(['SHA256', 'bcrypt', 'JWT']),
            interface=random.choice(['UI', 'API', 'dashboard'])
        )
        
        timestamp = base_date + timedelta(days=random.randint(0, 365), hours=random.randint(0, 23), minutes=random.randint(0, 59))
        
        data.append({
            "timestamp": timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            "source": "LegacyAPI",  # Deprecation warnings typically come from legacy systems
            "log_message": message,
            "target_label": "deprecation_warning",
            "complexity": generate_complexity_for_category("deprecation_warning")
        })
        entry_id += 1
    
    # Generate unclassified samples (edge cases, unusual logs)
    unclassified_templates = [
        "Unknown event occurred in module {module}",
        "Unexpected behavior detected in {system}",
        "Anomalous pattern observed: {pattern}",
        "Unhandled exception in {component}",
        "Strange network activity from {ip}",
        "Unusual resource consumption detected",
        "Unexpected configuration change detected",
        "Mysterious process termination",
        "Unidentified protocol communication",
        "Irregular system behavior noted"
    ]
    
    for i in range(targets["unclassified"]):
        template = random.choice(unclassified_templates)
        message = template.format(
            module=f"Module{random.randint(1,20)}",
            system=random.choice(["SystemA", "SystemB", "SystemC"]),
            pattern=f"Pattern{random.randint(1,10)}",
            component=f"Component{random.randint(1,15)}",
            ip=f"192.168.{random.randint(1,255)}.{random.randint(1,255)}"
        )
        
        timestamp = base_date + timedelta(days=random.randint(0, 365), hours=random.randint(0, 23), minutes=random.randint(0, 59))
        
        data.append({
            "timestamp": timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            "source": random.choice(sources),
            "log_message": message,
            "target_label": "unclassified",
            "complexity": "llm"  # Complex edge cases
        })
        entry_id += 1
    
    return data

def main():
    print("Generating comprehensive enhanced training dataset...")
    
    # Generate data
    data = generate_dataset()
    
    # Create DataFrame
    df = pd.DataFrame(data)
    
    # Shuffle the data
    df = df.sample(frac=1, random_state=42).reset_index(drop=True)
    
    # Save to CSV
    df.to_csv(OUTPUT_FILE, index=False)
    
    print(f"Dataset generated successfully!")
    print(f"Total samples: {len(df)}")
    print(f"Category distribution:")
    print(df['target_label'].value_counts())
    print(f"Complexity distribution:")
    print(df['complexity'].value_counts())
    print(f"Saved to: {OUTPUT_FILE}")

if __name__ == "__main__":
    main()